name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

jobs:

  check-repo:
    name: Check git repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  check-code-style:
    name: Check code style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching

      - name: Check the code style
        run: cargo fmt --all -- --check

  check-code:
    name: Check rust code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching

      - name: Verify code
        run: cargo clippy

  test:
    name: Run application tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching

      - name: Test code
        run: cargo test

  check-unused-dependencies:
    name: Check for unused deps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching
        continue-on-error: true # upload cache even if there are errors in this step

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked

      - name: Analyze dependencies
        run: cargo +nightly udeps

  build:
    name: Build executable
    needs: [ check-repo, check-code-style, check-code, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching

      - name: Build application
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          cp target/x86_64-unknown-linux-gnu/release/chwp ./chwp-linux-x86-64

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact-linux-x86_64
          path: chwp-linux-x86-64

  build-deb-package:
    name: Build deb package
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      - name: Download previously built application
        uses: actions/download-artifact@v3
        with:
          name: artifact-linux-x86_64
          path: .

      - name: Prepare deb build
        run: |
          mkdir -p .pkg/usr/bin/
          cp chwp-linux-x86-64 .pkg/usr/bin/chwp
          chmod +x .pkg/usr/bin/chwp

      - name: Build deb file
        uses: jiro4989/build-deb-action@v2
        with:
          package: chwp
          package_root: .pkg
          maintainer: Rouven Himmelstein
          version: 1.${{ github.run_number }}.0
          arch: 'amd64'
          desc: 'Changes the wallpaper from the command line.'

      - name: Rename deb file
        run: |
          mv *.deb chwp-x86-64.deb

      - name: Upload deb artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact-deb-x86_64
          path: |
            chwp-x86-64.deb

  build-rpm-package:
    name: Build rpm package
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      - name: Download previously built application
        uses: actions/download-artifact@v3
        with:
          name: artifact-linux-x86_64
          path: .

      - name: Prepare rpm build
        run: |
          mkdir -p .pkg/usr/bin/
          cp chwp-linux-x86-64 .pkg/usr/bin/chwp
          chmod +x .pkg/usr/bin/chwp

      - name: Build rpm file
        uses: jiro4989/build-rpm-action@v2
        with:
          package: chwp
          package_root: .pkg
          maintainer: Rouven Himmelstein
          version: 1.${{ github.run_number }}.0
          arch: 'x86_64'
          desc: 'Changes the wallpaper from the command line.'

      - name: Rename rpm file
        run: |
          rm *debuginfo*.rpm
          mv *.rpm chwp-x86-64.rpm

      - name: Upload rpm artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact-rpm-x86_64
          path: |
            chwp-x86-64.rpm

  github-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [ build, build-deb-package , build-rpm-package ]
    if: github.ref_name == 'main' # only publish if the branch is main
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Download previous built application
        uses: actions/download-artifact@v3
        with:
          name: artifact-linux-x86_64
          path: .

      - name: Download previous built deb asset
        uses: actions/download-artifact@v3
        with:
          name: artifact-deb-x86_64
          path: .

      - name: Download previous built rpm asset
        uses: actions/download-artifact@v3
        with:
          name: artifact-rpm-x86_64
          path: .

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.${{ github.run_number }}.0
          release_name: Release 1.${{ github.run_number }}.0
          draft: false
          prerelease: false

      - name: Upload plain linux-x86_64 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: chwp-linux-x86-64
          asset_name: chwp-linux-x86-64
          asset_content_type: application/x-executable

      - name: Upload debian x86_64 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: chwp-x86-64.deb
          asset_name: chwp-x86-64.deb
          asset_content_type: application/x-executable

      - name: Upload rpm x86_64 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: chwp-x86-64.rpm
          asset_name: chwp-x86-64.rpm
          asset_content_type: application/x-executable

      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 10
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crates-io:
    name: Publish on crates.io
    needs: [ build ]
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' # only publish if the branch is main
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          toolchain: stable

      - uses: Swatinem/rust-cache@v1 # use /rust/cargo caching

      - name: Publish on crates.io
        run: |
          cargo install cargo-edit
          cargo set-version 1."$GITHUB_RUN_NUMBER".0
          cargo publish --token ${{ secrets.CRATES_IO_TOKEN }} --allow-dirty

  publish-aur-git:
    name: Publish AUR Git package
    needs: [ publish-crates-io ]
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' # only publish if the branch is main
    steps:

      - name: Set up AUR git environment
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa aur.archlinux.org >> ~/.ssh/known_hosts
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" >> ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          echo "${{ secrets.AUR_SSH_CONFIG }}" >> ~/.ssh/config
          git config --global user.email "${{ secrets.AUR_EMAIL }}"
          git config --global user.name "${{ secrets.AUR_USERNAME }}"

      - name: Checkout AUR repo
        run: |
          git clone ssh://aur@aur.archlinux.org/chwp-git.git chwp-aur

      - name: Set version to PKGBUILD
        run: |
          cd chwp-aur
          sed -i "s/^pkgver=.*/pkgver=1.$GITHUB_RUN_NUMBER.0/" PKGBUILD

      - name: Create SRCINFO
        run: |
          cd chwp-aur
          docker run -v $PWD:/pkg -w /pkg -u 1001 rouhim/archlinux-binutils makepkg --printsrcinfo > .SRCINFO

      - name: Push to AUR
        run: |
          cd chwp-aur
          git commit -am "v1.$GITHUB_RUN_NUMBER.0"
          git push

  publish-aur-bin:
    name: Publish AUR Bin package
    needs: [ github-release ]
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' # only publish if the branch is main
    steps:

      - name: Set up AUR git environment
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa aur.archlinux.org >> ~/.ssh/known_hosts
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" >> ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          echo "${{ secrets.AUR_SSH_CONFIG }}" >> ~/.ssh/config
          git config --global user.email "${{ secrets.AUR_EMAIL }}"
          git config --global user.name "${{ secrets.AUR_USERNAME }}"

      - name: Checkout AUR repo
        run: |
          git clone ssh://aur@aur.archlinux.org/chwp-bin.git chwp-aur

      - name: Set version to PKGBUILD
        run: |
          cd chwp-aur
          sed -i "s/^pkgver=.*/pkgver=1.$GITHUB_RUN_NUMBER.0/" PKGBUILD

      - name: Create SRCINFO
        run: |
          cd chwp-aur
          docker run -v $PWD:/pkg -w /pkg -u 1001 rouhim/archlinux-binutils makepkg --printsrcinfo > .SRCINFO

      - name: Push to AUR
        run: |
          cd chwp-aur
          git commit -am "v1.$GITHUB_RUN_NUMBER.0"
          git push
